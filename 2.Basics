The beginning
Pseudo code
1.function detail 
my_function(int a,int b)
 answer is a+b
 return answer
 
 2.	Allocate space in memory
       int a, int b
 
 3. 	Get user input	
 	What is your first_number ()
 	what is your second_number()
 	
 4. 	Run user's value through the function and save it in a variable
 	a = my_function(fist_number , second_number)

Stick with AAtest.c in Cs50x_practice_21 for working through/categorizing code. 


part transition to real code.
int my_function(int a,int b)
{
	int answer = a + b;
	return answer;
}

int main()
{
	int f,g;
	f = ("What is your first_number?")
	g = ("What is your secong_number?)
	
	int result = my_function();
}




These are the headers to use for you .c file
#inlude <cs50.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
these up top.

For each strip of code we could consider different scenarios, something like:
1. Written directly into main
2. Written with an input and no output
3. Written as a function with an ouput but no input (if possible)
4. Written with both an input and output
5. Save the input into a variable.
You may well need to ammend the base code to adjust for these different scenarios.



And to this to run your code:

gcc -o AAtest /home/maurizio/Desktop/Cs50x_practice_21/AAtest.c -I../libcs50/src -L../libcs50 -lcs50
Notice that the double dots are for one directory above. 

So lets start with datatypes.c


SOME THINGS THAT WORK:
################################
	char  name[7] = "Morris"; //7 refers to number of chars = NULL TC. Can't be used 		with * before name.
	printf("hello %6s \n " , name);//6s keeps size correct. chars less the null tc.
	
Alternatively: 
	char  * name = "Morris";  Although it's apparantly safer to name[7]
	
Chatgp says to use scanf in place of get_string etc. 


scanf in place of get_string
char named[7];
	printf("What is your name?");
	scanf("%6s",named);//Don't leave any trailing white spaces with scanf.
	printf("Hello %s \n " , named);
##################################	
	

//Ask someone their name and print "hello" and their name.
ALLTHEWAZE
// 1.In main  #2.As a function  3.no input/outpuT  4.input  5.output  6.input/output 7. Save output as a variable

printf("gOODBEY %s \n", get_string("WHat is your name " ));

char * sink = get_string("What is your name? ");
    
printf("Hello %s \n ", sink);// printf is taking two inputs (separated by a coma). AKA arguments or peramatures.


// %s is a placeholder for a variable

//ALTERNATIVE TO ABOVE
int main(void)
{
    printf("Hello %s \n ", get_string("What is your name? "));
}
// Not as tidy but shows you can plug the get_string function straight into the printf function as an input


void my(); //Interestingly, the input of the prototype can remain blank and it still works.
int main()
{
    my("David");//Hard-code the input string 
}
void my(char * x)//Make sure the datatype is a string
{
    printf("hello %s \n" , x);
}

//##################################
//Remember to always create your own function after testing it in main
//Ask someone their name and print "hello" and their name
//Ultimately, do this by returning a value from your function and saving the value in a variable in main and print it out
char * my(char * x);
int main()
{
    char * ih = get_string("what is your name? ");
    char * b = my(ih);
   printf("Hello %s \n " , b );
}

char* my(char * x)
{
    return x;
}



