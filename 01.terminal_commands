@@@@@
NEW STUFF HERE

@@@@@
Blue Terminal Shortcuts
ctrl fn 6 = Now use the arrow key to select lines of text.
alt 6     = De-selects the selection. 
ctrl k    = Cuts the selected text
ctrl u    = Paste
alt u     = Undo the last action
alt e     = Redo the last undone action
To copy, just right click and 'copy'
@@@@@


The keyboard shortcut to refresh a Google Chrome web page is Ctrl + R (or fn + F5).

Open a file in chrome on
google-chrome <file-path>


Copy a file and give it a different name:
This copies the contents of index.php and creates a new file about.php

cp index.php about.php




When trying to find a file or folder by name, use the powerful ‘find’ command as follows:
 sudo find / -name <filename>
In this case, the forward slash refers to the route location, the -name signifies you are searching the folder or file by name, <filename> is the  name of the folder you are searching for.  
For more info, see chatgpt/linux update management  key phrase: ‘To search for files by name’

Cntrl + L (lower case) or just type clear 
Clear the terminal of your typings 


Change all .c file extensions to .txt file extensions
for file in *.c; do mv "$file" "${file%.c}.txt"; done


@@@@@

Intro
This file shows git commands along with other Terminal commands saved on drive/AA Terminal/Terminal commands. It is here so you can quickly look it up on your phone.

Quick-look git commands
@@@
git clone https://your-token@github.com/username/repository.git

Git add .  Add everything to stage including untracked (newly created) files
Git commit -am “commit everything” Commit everything (unless newly created).
Git push 
Git status
@@@

Git commands

Go to the other file “Git authentication” for logging-in issues (from terminal)

Also it’s a good idea to watch the cs50 git video again to understand as a refresher. The notes for this video are being furnished below.

Git command guide from Cs50 
https://www.youtube.com/watch?v=NcoBAfJ6l2Q
*Working locally with git*
git clone <url>  
git add .   or git add <filename>  This adds a file you wish to be tracked.  So the file will be saved the next time you make a commit.


git commit -m "Type a message"
or
git commit -am "text here"  <--This adds and commits every file that has had changes made to it. (No need to add them all by filename, one at a time. phew!). 

Git push    This is the default where -u doesn’t seem to be required
git push -u origin main (main is name of branch so might be different)
Pushes local to github

When you have created a new file locally, you firstly need to add the file for staging.
git add <file_name>
Then
git commit -am “note here”
Then 
git push 

 
24.35 IN
https://www.youtube.com/watch?v=NcoBAfJ6l2Q
git pull  : Brings remote down to local and merges your master branch into origin master (the remote version of master)

It's common to have merge conflicts where updates were made locally and also on the remote file. 
These will be flagged when you git pull.

<<<<<<<<<<<HEAD
Local changes are seen here 
================
Remote changes will be in here 
>>>>>>>>>>>>>> 8563678…(this is the merge conflict hash (id) number)

So you now need to solve the merge conflict and delete the commit markers.

And then commit the local repo:
git commit -am
Then finally, git push 

Below is the long way of doing this:
git fetch 
git merge



git log : to view commit activity such as a hash, person responsible and date of commit

git reset --hard <a commit hash>
Resets your repo back to a previous commit via the specific hash for that commit 

git reset --hard origin/master
Resets your local repo to the current version that is on GitHub 

Branching
Allows you to work on different parts of your repo
Master branch is the default but you can move to other branches to try different things.


git branch (What branch I’m on and what branches exist)
git branch <name of branch>  <--Creates a new branch
Git checkout <name of branch> moves to another branch.


git checkout  -b style     :  Creates a new branch called style AND switches to it.
You can now do what you want on this branch named style and it won’t affect the master branch.



HEAD This points to the current branch you are on



git push --set-upstream origin style  <-- pushes new branch (named style) to github




fork
This is effectively a 'save as' function where you make a copy of something that you can then change without affecting the original.
This is typical when you want to contribute to someone;s work. You can fork their code giving you your own version of the code to work on which won’t affect the original code.

So if you go to the css bootstrap github repo, you can click on “fork” to receive your own copy of the code.

If you feel you have done something useful with the code you can create a “pull request” where you wait for permission to merge your changes into bootstrap. Your code will be reviewed and there may be a bit of back and forth until your pull request may be accepted. 

THE GITHUB PULL REQUEST FEATURE (DONE ON GITHUB.COM)
On github, go to the branch you created and start a 'pull' request
You can then write comments about your code. 
You then submit the request.
The github owner then has the opportunity to check your code before accepting the request to merge your branch with master. (rememeber, this is all being done on github and NOT local.stopp

You and the owner at a later stage can pull the github repo down to local. But this is a separate issue.


'When you run   git remote,   you see a list of remote repositories that your local repository is aware of. These remotes are references to the URLs of the remote repositories. A typical scenario involves having one or more remotes set up, and these remotes are usually associated with services like GitHub, GitLab, Bitbucket, or other Git hosting providers.'

'The default name for the primary remote repository is usually called "origin." When you clone a repository from GitHub, for example, the repository on GitHub is set as the "origin."'


'Adding a New Remote:
If you have another repository you want to work with, you can add a new remote using:
git remote add <remote-name> <remote-url>
Example:
git remote add upstream https://github.com/original-repo/original-repo.git
This sets up a new remote named "upstream" with the specified URL.

'


'You can view the URLs of the remotes by using the command   git remote -v  . This will show you both the fetch and push URLs for each remote.'


'When you have multiple remotes, you might want to fetch changes from one or push changes to another. You can specify the remote when pulling or pushing:
git pull <remote-name> <branch-name>
git push  <remote-name> <branch-name>
Examples:
git pull upstream master
git push origin feature-branch

Fetching and Pulling from Multiple Repositories:
git fetch --all
This fetches changes from all configured remotes. After fetching, you can merge or rebase as needed.


Pushing to Multiple Repositories:
git push --all



Managing Remote Branches:
If you want to work on a remote branch, you can create a local tracking branch:
git checkout -b local-branch-name origin/remote-branch-name

This sets up a local branch that tracks a remote branch.

By managing remotes and branches effectively, you can work on multiple repositories and collaborate with different teams or projects. Make sure to replace <remote-name>, <branch-name>, <remote-url>, etc., with the actual names and URLs relevant to your setup.




Terminal commands

This tells you what text editors you have. You need to replace nano with other possible editors. 

dpkg --get-selections | grep nano

If it comes back with the name and it also says “install”, it means it isn’t installed. 

Here are other possibilities other than nano
vim
emacs
gedit
leafpad
mousepad


Ubuntu 
renaming a file: navigate to the containing folder. Make sure it isn't open anywhere.
comand: mv oldname newname

Delete a folder:
rm -rf <your-git-folder>
Above is the quickest way without the ‘yes/no prompt. f stands for force.

Command to delete recursively with the prompt:
sudo rm -ri /path to directory /directory name>
(Use pwd to get the full path)

Command to delete non recursively 
sudo rm

Deleting a file:
sudo rm <filename>

Move a directory:
mv /path/to/source /path/to/destination


To open a file via terminal but continue using the same terminal.
Command
gedit <filename.c> &



Use; 
git status to determine any issues and show what stage you are at in the add/commit/push etc.
Use; git commit -am "all"  to batch commit (catch all)  commit is effectively a time stamp to save current progress at this point in time



Other Commands


For information on your laptop
sudo dmidecode | grep -A 9 "System Information"
########################################################

Very useful reference
https://cdn.cs50.net/2017/fall/shorts/command_line/command_line.pdf


32 bit or 63 bit?
lscpu

ctlr c   will get you back to being able to use the terminal again ie after opening something.

q   <--Gets you out of a 'stuck' process such as 'end'.

cat = displays the contents of a file

ls -al -- >  Lists permissions status

Ubuntu Version info 
lsb_release -a   -->  Info on your ubuntu release

/home/maurizio    -->  Default directory when you open the terminal

Two directories back takes you to opt
You then  there buy 
cd ..
then again
cd ..


Bodhi
When minimising files they disappear.
The fix is to   alt   +  tab.   By continually pressing tab (whilst alt is pressed down) you scroll through all windows currently minimised on the desktop. You can then choose the window you want. IE: google webpage, terminal window, files etc.


Use --new-window if you want to open a new instance of a gedit window
gedit --new-window /home/bodhi/Desktop/Cs50x_practice_21/2.Basics
Here, the file name is 2.Basics. I use pwd to get the full filepath.











//command line instructions for linuxx
//This new line is to test git fetch
///ls = list contents
///cd _= change directory
///cd = Typing cd alone takes you to home directory
// .  = Curret directory you are in
// .. = directory one level up
// pwd = present working directory
// ctrl l  = clears the screen
// ~  = Your home directory
// mkdir pset2= create a new directory called pset2

// cp = copy. Takes two inputs. the file you want to copy and copy location(new filename)

// cp -r  = Recursively copy a directory AND its contents.

// rm  = removes/deletes a file
// rm -f  = 'force' remove. Removes yes/no prompt
// rm -r  = This recursively deletes a directory (and its contents)ALTHOUGH I HAD TO PRESS 'Y' FOR EACH FILE/FOLDER/DIRECTORY DELETION.

// rm -rf = recursively AND forcibly remove a directory

// mv  text.c text1.c = move/rename a file from text.c to text1.c










github terminal/commands_linux

This file exists on your github. Update to github when done.
Terminal Commands
Ubuntu

I'v started adding newest on top (between the "@"
@@@@@@@@
renaming a file: navigate to the folder that holds the filename you wish to rename. Make sure it isn't open anywhere.
comand: mv oldname newname
simple as that.

Deleting a folder: Get to the folder that contains the folder you want to delete. Eg: Desktop/folder_to_delete.
Use the pwd comand to get the full file path to the parent folder (Desktop)
Us the rm -ri /path/to/folder then folder name'
EG: /home/bodhi/Desktop/folder to delete
You will be prompted to descend into the folder and delete the folder's contents then further prompted to delete the acual (now empty) folder. 
Using -ri rather than -r is much safer as you are prompted before an action is taken. You need to select y or n before an action is taken.

To open a file via terminal but continue using the same terminal, you open the file in the background by appending the comand with '&'
EG: gedit <filename.c> &
@@@@@@@@

Gnome is the open source desktop environment you are using.

GIT
##########################################################

Issues
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Use; git status to determine any issues
Use; git commit -am "all"  to batch commit (catch all)
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

CREATING A SHORTCUT TO A FOLDER
@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Open the folder in the file manager (nautilus), navigate to the directory to which you want to create a shortcut to.
Right click and select Open in Terminal.
For shortcut to current directory, type and execute

ln -s $PWD ~/Desktop/
For shortcut to a file/folder inside the current directory, type and execute

ln -s $PWD/filename ~/Desktop/
or

ln -s $PWD/dirname ~/Desktop/

NB: Once the shortcut is on your desktop, you can move it to wherever you want to.

@@@@@@@@@@@@@@@@@@@@@@@@@@@

git clone <url>
git branch <name of branch>  <--Creates a new branch
git push --set-upstream origin fork  <-- pushes new branch (named fork) to github
git branch <--Displays all branches
git checkout <name of branch you want to move to>
git commit -am "text here"  <--This adds and commits every file that has had changes made to it. (No need to add them all by filename, one at a time. phew!). I think that you ned to initialy 'add' them before being able to do this.

git push <== pushes local to github

git pull  <==Brings remote down to local and merges your master branch into origin master (the remote version of master)
Below is the long way of doing this:
git fetch 
git merge

fork
This is effectively a 'save as' function where you make a copy of something that you can then change without effecting the original

THE GITHUB PULL REQUEST FEATURE (DONE ON GITHUB.COM)
On github, go to the branch you created and start a 'pull' request
You can then write comments about your code. 
You then submit the request.
The github owner then has the opportunity to check your code before accepting the request to merge your branch with master. (rememeber, this is all being done on github and NOT local.stopp

You and the owner at a later stage can pull the github repo down to local. But this is a separate issue.




##########################################################

########################################################
For information on your laptop
sudo dmidecode | grep -A 9 "System Information"
########################################################

Very useful reference
https://cdn.cs50.net/2017/fall/shorts/command_line/command_line.pdf

ctlr c   will get you back to being able to use the terminal again ie after opening something.

q   <--Gets you out of a 'stuck' process such as 'end'.

cat = displays the contents of a file


ls -al -- >  Lists permissions status


lsb_release -a   -->  Info on your ubuntu release


/home/maurizio    -->  Default directory when you open the terminal

Two directories back takes you to opt
You then  there buy 
cd ..
then again
cd ..


OPEN FILE FROM COMMAND LINE
##########################################
Default editor is gedit so:
gedit <filename>   <--Opens the file in gedit.
If you try   bluefish <filename>  it shouts a warning but opens it anyway.  (** (bluefish:6896): WARNING **: 08:53:06.081: failed to load plugin)
##########################################

DELETING
################################################
sudo rm <filename>

For directories, you need to use the –r flag, (remove recursively)
just as was the case with cp.
sudo rm –r <directory>  <--To delete entire directories.
	    'sudo' gives you correct permissions and asks for pword

sudo rm –rf <directory>  <--without y/n confirmation

################################################
